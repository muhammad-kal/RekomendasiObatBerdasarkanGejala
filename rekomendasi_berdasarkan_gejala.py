# -*- coding: utf-8 -*-
"""Rekomendasi Berdasarkan Gejala.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HDaTgzhzygaODfY48qZByvXP82bkk-vU

# **Project Overview**

## Latar Belakang
Sistem rekomendasi penyakit berdasarkan gejala dapat membantu pengguna mendapatkan informasi awal mengenai kemungkinan kondisi medis yang mereka alami dan obat-obatan yang umumnya terkait. Proyek ini bertujuan membangun sistem rekomendasi yang menyarankan penyakit berdasarkan gejala yang dimasukkan pengguna, dan selanjutnya menampilkan informasi obat untuk penyakit yang direkomendasikan.

Sumber Dataset : [Kaggle : https://www.kaggle.com/datasets/noorsaeed/medicine-recommendation-system-dataset/data]

Referensi :
Komal Kumar, N., & Vigneswari, D. (2019, December). A drug recommendation system for multi-disease in health care using machine learning. In International Conference on Advanced Communication and Computational Technology (pp. 1-12). Singapore: Springer Nature Singapore.

# **Business Understanding**

## Problem Statements
1.  Bagaimana cara merekomendasikan penyakit kepada pengguna berdasarkan kumpulan gejala yang mereka alami?
2.  Bagaimana cara menyajikan informasi obat yang relevan untuk penyakit yang direkomendasikan?
3.  Algoritma atau pendekatan apa yang cocok untuk membangun sistem rekomendasi ini?

## Goals
1.  Membuat sistem yang dapat menerima input berupa gejala-gejala dari pengguna dan mengeluarkan daftar rekomendasi penyakit.
2.  Menampilkan daftar obat yang umum digunakan untuk penyakit-penyakit yang direkomendasikan.
3.  Menerapkan pendekatan *content-based filtering* untuk merekomendasikan penyakit berdasarkan kesamaan gejala.

## Solution Approach
Pendekatan utama adalah **Content-Based Filtering** untuk rekomendasi penyakit, diikuti dengan pencarian (lookup) informasi obat.
1.  **Representasi Fitur Penyakit**: Setiap penyakit akan direpresentasikan oleh profil gejalanya.
2.  **Representasi Fitur Obat**: Dataset kedua akan digunakan untuk memetakan penyakit ke obat-obatannya.
3.  **Input Pengguna**: Pengguna memasukkan satu atau lebih gejala.
4.  **Mekanisme Rekomendasi Penyakit**: Sistem menghitung kesamaan antara gejala input dengan profil gejala penyakit.
5.  **Menampilkan Obat**: Untuk penyakit yang direkomendasikan, sistem akan mencari dan menampilkan daftar obat terkait.
6.  **Output**: Top-N rekomendasi penyakit beserta obatnya.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import ast
from google.colab import files
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

"""# Load Data"""

#load dataset 1 (gejala)
df_symptoms = pd.read_csv('symtoms_df.csv')

df_symptoms.head()

df_symptoms.tail()

df_symptoms.info()

df_symptoms.describe()

print(df_symptoms['Symptom_1'].unique())

df_symptoms.Symptom_2.unique()

df_symptoms.Symptom_3.unique()

df_symptoms.Symptom_4.unique()

print(f"Jumlah penyakit unik: {df_symptoms['Disease'].nunique()}")

#Menghitung Jumlah Gejala Unik (perlu menggabungkan semua kolom gejala)
symptoms = set()
for col in ['Symptom_1', 'Symptom_2', 'Symptom_3', 'Symptom_4']:
    df_symptoms[col].dropna().apply(lambda x: symptoms.add(x.strip())) # .strip() untuk menghapus spasi ekstra
print(f"Jumlah gejala unik: {len(symptoms)}")

## Melihat beberapa gejala unik
list(symptoms)[:]

#dataset 2 (medicine/obat berdasarkan gejala)
df_medicine = pd.read_csv('medications.csv')
df_medicine.head()

df_medicine.info()

df_medicine.describe(include='all')

"""## Analisis Awal
### Dataset Gejala-Penyakit
"""

# Jumlah penyakit unik
print(f"\nJumlah penyakit unik di df_symptoms: {df_symptoms['Disease'].nunique()}")

# Jumlah gejala unik (perlu menggabungkan semua kolom gejala)
symptoms_set = set()
for col in ['Symptom_1', 'Symptom_2', 'Symptom_3', 'Symptom_4']:
    df_symptoms[col].dropna().apply(lambda x: symptoms_set.add(x.strip().lower()))
print(f"Jumlah gejala unik di df_symptoms: {len(symptoms_set)}")

"""### Dataset Penyakit-Obat"""

# Jumlah penyakit unik
print(f"\nJumlah penyakit unik di df_medicine: {df_medicine['Disease'].nunique()}")
# Cek apakah ada missing values di kolom Medication
print(f"Missing values di kolom Medication: {df_medicine['Medication'].isnull().sum()}")

"""# Data Preparation

## 4.1 Persiapan Dataset Gejala-Penyakit (df_symptoms)
"""

# Menghapus kolom 'Unnamed: 0'
if 'Unnamed: 0' in df_symptoms.columns:
    df_symptoms_processed = df_symptoms.drop(columns=['Unnamed: 0'])
else:
    df_symptoms_processed = df_symptoms.copy()

df_symptoms_processed.isnull().sum()

# Menangani Missing Values (NaN) di kolom gejala dan membersihkan spasi
symptom_cols = ['Symptom_1', 'Symptom_2', 'Symptom_3', 'Symptom_4']
for col in symptom_cols:
    df_symptoms_processed[col] = df_symptoms_processed[col].fillna('').str.strip().str.lower()

# Membersihkan nama penyakit (hapus spasi ekstra dan ubah ke lowercase untuk konsistensi)
df_symptoms_processed['Disease'] = df_symptoms_processed['Disease'].str.strip().str.lower()

# Membuat profil gejala untuk setiap penyakit unik
df_symptoms_processed['all_symptoms_list'] = df_symptoms_processed[symptom_cols].values.tolist()

disease_symptoms_map = {}
for index, row in df_symptoms_processed.iterrows():
    disease = row['Disease']
    symptoms_for_row = set(s for s in row['all_symptoms_list'] if s) # Gejala unik per baris
    if disease not in disease_symptoms_map:
        disease_symptoms_map[disease] = set()
    disease_symptoms_map[disease].update(symptoms_for_row)

disease_profile_df = pd.DataFrame([
    {'Disease': disease, 'Symptoms_Profile': ' '.join(sorted(list(symptoms)))}
    for disease, symptoms in disease_symptoms_map.items()
])

print("\n--- Profil Penyakit Berdasarkan Gejala (disease_profile_df) ---")
disease_profile_df.head()

print(f"Jumlah profil penyakit unik setelah grouping: {len(disease_profile_df)}")

"""## 4.2 Persiapan Dataset Penyakit-Obat (df_medicine)"""

# Menghapus kolom yang mungkin tidak perlu jika ada (misal 'Unnamed: 0')
if 'Unnamed: 0' in df_medicine.columns:
    df_medicine_processed = df_medicine.drop(columns=['Unnamed: 0'])
else:
    df_medicine_processed = df_medicine.copy()

# Membersihkan nama penyakit (agar konsisten dengan df_symptoms_processed)
df_medicine_processed['Disease'] = df_medicine_processed['Disease'].str.strip().str.lower()

# Menangani missing values di kolom Medication (jika ada)
df_medicine_processed['Medication'] = df_medicine_processed['Medication'].fillna("['Informasi tidak tersedia']")

# Parsing kolom 'Medication' jika masih dalam bentuk string '[item1, item2]'
def parse_medication_string(med_str):
    try:
        parsed_list = ast.literal_eval(med_str)
        if isinstance(parsed_list, list):
            return [str(item).strip() for item in parsed_list]
        return [med_str]
    except (ValueError, SyntaxError):
        return [med_str.strip()] if isinstance(med_str, str) else ["Informasi tidak tersedia"]

df_medicine_processed['Medication_List'] = df_medicine_processed['Medication'].apply(parse_medication_string)

print("\n--- Dataset Obat Setelah Diproses (df_medicine_processed) ---")
df_medicine_processed.head()

# Hapus duplikat penyakit jika ada, pertahankan yang pertama
df_medicine_processed = df_medicine_processed.drop_duplicates(subset=['Disease'], keep='first')
print(f"Jumlah entri unik obat per penyakit: {len(df_medicine_processed)}")

"""# Modeling (Content-Based Filtering)

## Menggunakan TF-IDF Vectorizer untuk Gejala
"""

#menggunakan TF-IDF
tfidf_vectorizer = TfidfVectorizer()
disease_profile_df['Symptoms_Profile'] = disease_profile_df['Symptoms_Profile'].fillna('') # Pastikan tidak ada NaN
tfidf_matrix_symptoms = tfidf_vectorizer.fit_transform(disease_profile_df['Symptoms_Profile'])

print(f"\nBentuk matriks TF-IDF Gejala: {tfidf_matrix_symptoms.shape}")

"""## Menghitung Kesamaan Cosine antar Penyakit"""

cosine_sim_symptoms = cosine_similarity(tfidf_matrix_symptoms, tfidf_matrix_symptoms)
print(f"Bentuk matriks Cosine Similarity Gejala: {cosine_sim_symptoms.shape}")

"""# **Membuat Sistem Rekomendasi dan Evaluasi**

## Membuat Fungsi Rekomendasi Penyakit dan Obat
"""

# Fungsi untuk mendapatkan obat
def get_medications_for_disease_lookup(disease_name, medicine_df):
    meds_row = medicine_df[medicine_df['Disease'].str.lower() == disease_name.lower()]
    if not meds_row.empty:
        med_list = meds_row['Medication_List'].iloc[0]
        return ', '.join(med_list) if isinstance(med_list, list) else med_list
    return "Informasi obat tidak tersedia."

# Fungsi utama rekomendasi
def recommend_diseases_and_meds(user_symptoms_str, disease_profiles, medicine_data, tfidf_vec, tfidf_mat, top_n=5):
    processed_user_symptoms = ' '.join(sorted(list(set(s.strip().lower() for s in user_symptoms_str.split(',') if s.strip()))))

    if not processed_user_symptoms:
        print("\nMohon masukkan gejala.")
        return None, [] # Kembalikan None jika tidak ada input

    user_tfidf_vector = tfidf_vec.transform([processed_user_symptoms])
    cosine_similarities_user = cosine_similarity(user_tfidf_vector, tfidf_mat)
    similarity_scores = list(enumerate(cosine_similarities_user[0]))
    sorted_similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)

    print(f"\nGejala yang Anda masukkan: {user_symptoms_str}")
    print(f"Rekomendasi {top_n} penyakit teratas beserta kemungkinan obatnya:")

    recommended_diseases_list = []
    recommended_scores_list = []

    recommended_count = 0
    for i in range(len(sorted_similarity_scores)):
        if recommended_count >= top_n:
            break

        disease_index = sorted_similarity_scores[i][0]
        score = sorted_similarity_scores[i][1]
        disease_name = disease_profiles['Disease'].iloc[disease_index]

        if score > 0:
            medications = get_medications_for_disease_lookup(disease_name, medicine_data)
            print(f"{recommended_count+1}. Penyakit: {disease_name.title()} (Skor Kesamaan Gejala: {score:.2f})")
            print(f"   Obat Umum: {medications}")
            print("-" * 30)
            recommended_diseases_list.append(disease_name)
            recommended_scores_list.append(score)
            recommended_count += 1
        elif recommended_count == 0 and i == 0:
            print("Tidak ditemukan penyakit yang cocok dengan gejala yang Anda masukkan.")
            return None, [] # Kembalikan None jika tidak ada rekomendasi

    return pd.Series(recommended_diseases_list), recommended_scores_list

"""# Testing Rekomendasi & Evaluation"""

# Contoh Penggunaan Sistem Rekomendasi
user_input_1 = "itching, skin_rash, nodal_skin_eruptions"
recs1, scores1 = recommend_diseases_and_meds(user_input_1, disease_profile_df, df_medicine_processed, tfidf_vectorizer, tfidf_matrix_symptoms, top_n=3)

user_input_2 = "vomiting, headache, nausea"
recs2, scores2 = recommend_diseases_and_meds(user_input_2, disease_profile_df, df_medicine_processed, tfidf_vectorizer, tfidf_matrix_symptoms, top_n=3)

user_input_3 = "fever, cough, breathlessness"
recs3, scores3 = recommend_diseases_and_meds(user_input_3, disease_profile_df, df_medicine_processed, tfidf_vectorizer, tfidf_matrix_symptoms, top_n=3)

user_input_4 = "runny_nose"
recs4, scores4 = recommend_diseases_and_meds(user_input_4, disease_profile_df, df_medicine_processed, tfidf_vectorizer, tfidf_matrix_symptoms, top_n=3)

"""## Metrik Evaluasi
Evaluasi untuk sistem ini bersifat kualitatif dan berbasis kasus karena tidak adanya *ground truth* yang terpisah untuk pengujian otomatis.

1.  **Relevansi Penyakit**: Berdasarkan contoh penggunaan.
2.  **Relevansi Obat**: Keakuratan daftar obat bergantung pada kualitas dataset `medications.csv`.
3.  **Precision@k (Manual/Sampled)**: Mengambil sampel, menggunakan beberapa gejala sebagai input, dan melihat apakah penyakit asli muncul di top-k.
"""

# Evaluasi Precision@k Sederhana (Manual)
test_samples_eval = df_symptoms_processed.drop_duplicates(subset=['Disease'], keep='first').sample(10, random_state=42)

hits_at_1_eval = 0
hits_at_3_eval = 0
k_eval = 3

print("\n\n--- EVALUASI PRECISION@K SEDERHANA ---")
for index, row in test_samples_eval.iterrows():
    input_symptoms_list = [s for s in [row['Symptom_1'], row['Symptom_2'], row['Symptom_3'], row['Symptom_4']] if s][:3]
    input_symptoms_str_eval = ','.join(input_symptoms_list)

    true_disease_eval = row['Disease']

    print(f"\nInput Gejala Uji: {input_symptoms_str_eval}")
    print(f"Penyakit Sebenarnya: {true_disease_eval.title()}")

    _processed_user_symptoms_eval = ' '.join(sorted(list(set(s.strip().lower() for s in input_symptoms_str_eval.split(',') if s.strip()))))
    if not _processed_user_symptoms_eval:
        print("Tidak ada gejala input untuk evaluasi.")
        continue

    _user_tfidf_vector_eval = tfidf_vectorizer.transform([_processed_user_symptoms_eval])
    _cosine_similarities_user_eval = cosine_similarity(_user_tfidf_vector_eval, tfidf_matrix_symptoms)
    _similarity_scores_eval = list(enumerate(_cosine_similarities_user_eval[0]))
    _sorted_similarity_scores_eval = sorted(_similarity_scores_eval, key=lambda x: x[1], reverse=True)

    recommended_diseases_names_eval = []
    print(f"Top-{k_eval} Rekomendasi:")

    _recommended_count_eval = 0
    for _i_eval in range(len(_sorted_similarity_scores_eval)):
        if _recommended_count_eval >= k_eval:
            break

        _disease_idx_eval = _sorted_similarity_scores_eval[_i_eval][0]
        _score_eval = _sorted_similarity_scores_eval[_i_eval][1]
        _rec_disease_name_eval = disease_profile_df['Disease'].iloc[_disease_idx_eval]

        if _score_eval > 0:
            print(f"- {_rec_disease_name_eval.title()} (Skor: {_score_eval:.2f})")
            recommended_diseases_names_eval.append(_rec_disease_name_eval)
            _recommended_count_eval +=1
        elif _recommended_count_eval == 0 and _i_eval ==0:
            print("Tidak ada rekomendasi.")
            break

    if recommended_diseases_names_eval:
        if true_disease_eval == recommended_diseases_names_eval[0]:
            hits_at_1_eval += 1
        if true_disease_eval in recommended_diseases_names_eval[:k_eval]:
            hits_at_3_eval += 1

precision_at_1_final = hits_at_1_eval / len(test_samples_eval) if len(test_samples_eval) > 0 else 0
precision_at_3_final = hits_at_3_eval / len(test_samples_eval) if len(test_samples_eval) > 0 else 0

print(f"\nPrecision@1 (dari 10 sampel): {precision_at_1_final:.2f}")
print(f"Precision@3 (dari 10 sampel): {precision_at_3_final:.2f}")

